(function(){var e,t,n,r,i,s,o,u,a,f,l,c,h,p,d,v;String.prototype.trim||(String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"")}),(!window.console||!console.log)&&function(){var e,t,n,r,i;r=function(){},n=["assert","clear","count","debug","dir","dirxml","error","exception","group","groupCollapsed","groupEnd","info","log","markTimeline","profile","profileEnd","markTimeline","table","time","timeEnd","timeStamp","trace","warn"],t=n.length,e=window.console={},i=[];while(t--)i.push(e[n[t]]=r);return i}(),o=function(){return!!window.history&&!!history.pushState},c="",l=!1,r=function(){var e,t;c="",l=!1,t=$("#js-challenge"),t!=null&&t.length>0&&(c=t.data("path"),l=t.data("answerable")),e=$("#code-prefill"),e!=null&&e.length>0&&f(e.text().trim()+"\n# Ketik jawaban di bawah ini\n");if(o())return $(".js-challenge-link").on("click",function(){return s($(this).attr("href")),!1})},d=!1,s=function(e){return o()?(d||(d=!0,$(window).on("popstate",function(e){return s(window.location.href)})),$.get(e,{},function(t,n,i){var s,o,u;return u="#js-question",s=$(u),o=function(){var n;return n=$(t),s.html(n.find(u).html()),r(),history.pushState({},n.find("title").text(),e)},$.support.transition?s.transition({opacity:0,scale:.9},350,"out",function(){return o(),s.transition({opacity:1,scale:1},400,"out")}):o()})):window.location.href=e},i=function(e){return s([challengeRoot,e].join("/")+".html")},h=null,p=!1,f=function(e){return p?h.getSession().setValue(e):$("#snippet-runner-code-content").html("<pre>"+e+"</pre>")},u=function(){return p?h.getSession().getValue():$("#snippet-runner-code-content").text()},a=function(){if(window.ace)return h=ace.edit("code-editor"),h.setTheme("ace/theme/solarized_light"),h.getSession().setMode("ace/mode/ruby"),p=!0},e=$("body"),t=$("#loading-indicator"),v=$("#snippet-request-error-template").text(),n=$("#snippet-runner"),$("#snippet-request-error-template").remove(),a(),r(),$(".btn-run").on("click",function(){var e,n;return e=$("#run-output"),n=u(),t.text("Memproses..."),$.post(rubyEvalRoot+"/coba-ruby.json",{snippet:n,challenge_path:c},function(n,r,s){return l&&n.is_correct&&i(n.next_challenge_path),t.text(""),e.text(n.output)}).fail(function(){return t.text(""),e.text(v)})})}).call(this);